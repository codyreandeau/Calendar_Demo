--drop table exp_bookings;
--drop table exp_dates;
--drop table exp_users;

-- users table
create table exp_users (
  user_id number generated by default as identity primary key,
  email varchar2(100) unique not null,
  created timestamp default systimestamp,
  updated timestamp default systimestamp,
  created_by varchar2(100),
  updated_by varchar2(100)
);

-- tour dates table
create table exp_dates (
  tour_date_id number generated by default as identity primary key,
  tour_date date not null,
  capacity number default 10 check (capacity > 0),
  seats_booked number default 0,
  created timestamp default systimestamp,
  updated timestamp default systimestamp,
  created_by varchar2(100),
  updated_by varchar2(100)
);

-- tour bookings table
create table exp_bookings (
  booking_id number generated by default as identity primary key,
  user_id number references exp_users(user_id) on delete cascade,
  tour_date_id number references exp_dates(tour_date_id) on delete cascade,
  booking_date timestamp default systimestamp,
  created timestamp default systimestamp,
  updated timestamp default systimestamp,
  created_by varchar2(100),
  updated_by varchar2(100)
);

-- trigger to populate audit columns
create or replace trigger exp_trg_users_audit
before insert or update on exp_users
for each row
begin
  if inserting then
    :new.created := systimestamp;
    :new.created_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
  end if;
  if updating then
    :new.updated := systimestamp;
    :new.updated_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
  end if;
end;
/

create or replace trigger exp_trg_dates_audit
before insert or update on exp_dates
for each row
begin
  if inserting then
    :new.created := systimestamp;
    :new.created_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
  end if;
  if updating then
    :new.updated := systimestamp;
    :new.updated_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
  end if;
end;
/

create or replace trigger exp_trg_bookings_audit
before insert or update on exp_bookings
for each row
begin
  if inserting then
    :new.created := systimestamp;
    :new.created_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
  end if;
  if updating then
    :new.updated := systimestamp;
    :new.updated_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
  end if;
end;
/

-- insert tour dates
insert into exp_dates (tour_date) values (to_date('10/10/2025', 'MM/DD/YYYY'));
insert into exp_dates (tour_date) values (to_date('10/17/2025', 'MM/DD/YYYY'));
insert into exp_dates (tour_date) values (to_date('10/24/2025', 'MM/DD/YYYY'));
insert into exp_dates (tour_date) values (to_date('10/31/2025', 'MM/DD/YYYY'));
insert into exp_dates (tour_date) values (to_date('11/07/2025', 'MM/DD/YYYY'));
insert into exp_dates (tour_date) values (to_date('11/14/2025', 'MM/DD/YYYY'));
insert into exp_dates (tour_date) values (to_date('11/21/2025', 'MM/DD/YYYY'));
insert into exp_dates (tour_date) values (to_date('11/28/2025', 'MM/DD/YYYY'));
insert into exp_dates (tour_date) values (to_date('12/05/2025', 'MM/DD/YYYY'));
insert into exp_dates (tour_date) values (to_date('12/12/2025', 'MM/DD/YYYY'));
insert into exp_dates (tour_date) values (to_date('12/19/2025', 'MM/DD/YYYY'));
insert into exp_dates (tour_date) values (to_date('12/26/2025', 'MM/DD/YYYY'));
